networks:
  micro_net:
    driver: bridge

volumes:
  mongo-data:
  postgres-auth-data:
  postgres-user-data:
  redis_data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    env_file:
      - .env
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "2181:2181"
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          set -e;
          # 1. Está vivo?
          echo ruok | nc localhost 2181 | grep -q imok;
          # 2. Está em um modo válido (leader/follower/standalone)?
          echo stat | nc localhost 2181 | grep -Eq 'Mode: (leader|follower|standalone)' || exit 1
      interval: 10s
      timeout: 3s
      start_period: 15s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 20s
      timeout: 10s
      start_period: 30s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  redis:
    image: redis:8-alpine
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep -q PONG"]
      interval: 10s
      timeout: 5s
      start_period: 20s
      retries: 3
    networks:
      - micro_net

  postgres-auth:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
      - ./init-db/auth-init:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${AUTH_POSTGRES_USER} -d ${AUTH_POSTGRES_DB}",
        ]
      interval: 10s
      timeout: 5s
      start_period: 20s
      retries: 3
    networks:
      - micro_net

  postgres-user:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${USER_POSTGRES_DB}
      POSTGRES_USER: ${USER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
      - ./init-db/user-init:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${USER_POSTGRES_USER} -d ${USER_POSTGRES_DB}",
        ]
      interval: 10s
      timeout: 5s
      start_period: 20s
      retries: 3
    networks:
      - micro_net

  mongo:
    image: mongo:7.0
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      # passa as vars para o init script criar o user limitado
      LOG_DB_NAME: ${LOG_DB_NAME}
      LOG_DB_USER: ${LOG_DB_USER}
      LOG_DB_PASSWORD: ${LOG_DB_PASSWORD}
    # em dev pode expor para debug; em produção remova esta linha
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./init-mongo:/docker-entrypoint-initdb.d # init script para criar user da app
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'mongosh -u ${MONGO_ROOT_USER} -p ${MONGO_ROOT_PASSWORD} --authenticationDatabase admin --quiet --eval "db.adminCommand(''ping'')"',
        ]
      interval: 10s
      timeout: 5s
      start_period: 25s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  logservice:
    build:
      context: .
      dockerfile: LogService/Dockerfile
    expose:
      - "8080"
    ports:
      - "5001:5001"
    env_file:
      - .env
    depends_on:
      - kafka
      - mongo
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://+:5001
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          bash -c "printf 'GET /health HTTP/1.1\r\nHost: userservice\r\nConnection: close\r\n\r\n' |
          nc -w 2 localhost 5001 |
          head -n1 | grep -Eq 'HTTP/1\\.[01] (2|4)\\d\\d' || exit 1"
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  userservice:
    build:
      context: .
      dockerfile: UserService/Dockerfile
    expose:
      - "8080"
    env_file:
      - .env
    ports:
      - "5002:5002"
    depends_on:
      - kafka
      - postgres-user
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://+:5002
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          bash -c "printf 'GET /health HTTP/1.1\r\nHost: userservice\r\nConnection: close\r\n\r\n' |
          nc -w 2 localhost 5002 |
          head -n1 | grep -Eq 'HTTP/1\\.[01] (2|4)\\d\\d' || exit 1"
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  authservice:
    build:
      context: .
      dockerfile: AuthService/Dockerfile
    expose:
      - "8080"
    ports:
      - "5003:5003"
    env_file:
      - .env
    depends_on:
      - postgres-auth
      - kafka
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://+:5003
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          bash -c "printf 'GET /health HTTP/1.1\r\nHost: userservice\r\nConnection: close\r\n\r\n' |
          nc -w 2 localhost 5003 |
          head -n1 | grep -Eq 'HTTP/1\\.[01] (2|4)\\d\\d' || exit 1"
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  apigateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - .env
    volumes:
      - ./ApiGateway/ocelot.json:/app/ocelot.json:ro
      - ./ApiGateway/appsettings.json:/app/appsettings.json:ro
      - ./ApiGateway/appsettings.Development.json:/app/appsettings.Development.json:ro
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://+:5000
    networks:
      - micro_net
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5000/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s
    restart: unless-stopped
