networks:
  micro_net:
    driver: bridge

volumes:
  mongo-data:
  postgres-identity-data:
  redis_data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    env_file:
      - .env
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok,stat"
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          set -e;
          echo ruok | nc -w 2 localhost 2181 | grep -q imok;
          echo stat | nc -w 2 localhost 2181 | grep -Eq 'Mode: (leader|follower|standalone)' || exit 1
      interval: 10s
      timeout: 3s
      start_period: 15s
      retries: 3
    networks:
      - micro_net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    env_file:
      - .env
    expose:
      - "9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" 
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"
    healthcheck:
      test:
        - "CMD-SHELL"
        - "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"
      interval: 20s
      timeout: 10s
      start_period: 30s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  redis:
    image: redis:8-alpine
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    expose:
      - "6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep -q PONG"]
      interval: 10s
      timeout: 5s
      start_period: 20s
      retries: 3
    networks:
      - micro_net

  postgres-identity:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${IDENTITY_POSTGRES_DB}
      POSTGRES_USER: ${IDENTITY_POSTGRES_USER}
      POSTGRES_PASSWORD: ${IDENTITY_POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    expose:
      - "5432"
    volumes:
      - postgres-identity-data:/var/lib/postgresql/data
      - ./init-db/identity-init:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        - "CMD-SHELL"
        - "pg_isready -U ${IDENTITY_POSTGRES_USER} -d ${IDENTITY_POSTGRES_DB}"
      interval: 10s
      timeout: 5s
      start_period: 20s
      retries: 3
    networks:
      - micro_net

  mongo:
    image: mongo:7.0
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      LOG_DB_NAME: ${LOG_DB_NAME}
      LOG_DB_USER: ${LOG_DB_USER}
      LOG_DB_PASSWORD: ${LOG_DB_PASSWORD}
    expose:
      - "27017"
    volumes:
      - mongo-data:/data/db
      - ./init-mongo:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          mongosh -u ${MONGO_ROOT_USER} -p ${MONGO_ROOT_PASSWORD} --authenticationDatabase admin --quiet \
            --eval "db.adminCommand('ping')" || exit 1
      interval: 10s
      timeout: 5s
      start_period: 25s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  logservice:
    build:
      context: .
      dockerfile: LogService/Dockerfile
    expose:
      - "5001"
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://+:5001
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    healthcheck:
      test:
        - "CMD-SHELL"
        - "curl --fail http://localhost:5001/health || exit 1"
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  mailservice:
    build:
      context: .
      dockerfile: MailService/Dockerfile
    expose:
      - "5004"
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://+:5004
    healthcheck:
      test:
        - "CMD-SHELL"
        - "curl --fail http://localhost:5004/health || exit 1"
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  identityservice:
    build:
      context: .
      dockerfile: IdentityService/Dockerfile
    expose:
      - "5002"
    ports:
      - "5002:5002"
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      postgres-identity:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://+:5002
      ConnectionStrings__Identity: ${ConnectionStrings__Identity}
      Kafka__BootstrapServers: ${KAFKA_BOOTSTRAP_SERVERS}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
    healthcheck:
      test:
        - "CMD-SHELL"
        - "curl --fail http://localhost:5002/health || exit 1"
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped

  apigateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - .env
    volumes:
      - ./ApiGateway/ocelot.json:/app/ocelot.json:ro
      - ./ApiGateway/appsettings.json:/app/appsettings.json:ro
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://+:5000
    depends_on:
      identityservice:
        condition: service_healthy
      logservice:
        condition: service_healthy
    healthcheck:
      test:
        - "CMD-SHELL"
        - "curl --fail http://localhost:5000/health || exit 1"
      interval: 15s
      timeout: 5s
      start_period: 45s
      retries: 3
    networks:
      - micro_net
    restart: unless-stopped
